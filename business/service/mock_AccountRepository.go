// Code generated by mockery v2.42.1. DO NOT EDIT.

package service

import (
	context "context"

	domain "github.com/fedepezzola/transactions/business/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// GetByAccountNumber provides a mock function with given fields: _a0, accountNumber
func (_m *MockAccountRepository) GetByAccountNumber(_a0 context.Context, accountNumber string) (*domain.Account, error) {
	ret := _m.Called(_a0, accountNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccountNumber")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Account, error)); ok {
		return rf(_a0, accountNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Account); ok {
		r0 = rf(_a0, accountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_GetByAccountNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccountNumber'
type MockAccountRepository_GetByAccountNumber_Call struct {
	*mock.Call
}

// GetByAccountNumber is a helper method to define mock.On call
//   - _a0 context.Context
//   - accountNumber string
func (_e *MockAccountRepository_Expecter) GetByAccountNumber(_a0 interface{}, accountNumber interface{}) *MockAccountRepository_GetByAccountNumber_Call {
	return &MockAccountRepository_GetByAccountNumber_Call{Call: _e.mock.On("GetByAccountNumber", _a0, accountNumber)}
}

func (_c *MockAccountRepository_GetByAccountNumber_Call) Run(run func(_a0 context.Context, accountNumber string)) *MockAccountRepository_GetByAccountNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountRepository_GetByAccountNumber_Call) Return(_a0 *domain.Account, _a1 error) *MockAccountRepository_GetByAccountNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_GetByAccountNumber_Call) RunAndReturn(run func(context.Context, string) (*domain.Account, error)) *MockAccountRepository_GetByAccountNumber_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, m
func (_m *MockAccountRepository) Insert(ctx context.Context, m *domain.Account) (*domain.Account, error) {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) (*domain.Account, error)); ok {
		return rf(ctx, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) *domain.Account); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Account) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockAccountRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - m *domain.Account
func (_e *MockAccountRepository_Expecter) Insert(ctx interface{}, m interface{}) *MockAccountRepository_Insert_Call {
	return &MockAccountRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, m)}
}

func (_c *MockAccountRepository_Insert_Call) Run(run func(ctx context.Context, m *domain.Account)) *MockAccountRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Account))
	})
	return _c
}

func (_c *MockAccountRepository_Insert_Call) Return(_a0 *domain.Account, _a1 error) *MockAccountRepository_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_Insert_Call) RunAndReturn(run func(context.Context, *domain.Account) (*domain.Account, error)) *MockAccountRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, m
func (_m *MockAccountRepository) Update(ctx context.Context, m *domain.Account) (*domain.Account, error) {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) (*domain.Account, error)); ok {
		return rf(ctx, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) *domain.Account); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Account) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - m *domain.Account
func (_e *MockAccountRepository_Expecter) Update(ctx interface{}, m interface{}) *MockAccountRepository_Update_Call {
	return &MockAccountRepository_Update_Call{Call: _e.mock.On("Update", ctx, m)}
}

func (_c *MockAccountRepository_Update_Call) Run(run func(ctx context.Context, m *domain.Account)) *MockAccountRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Account))
	})
	return _c
}

func (_c *MockAccountRepository_Update_Call) Return(_a0 *domain.Account, _a1 error) *MockAccountRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Account) (*domain.Account, error)) *MockAccountRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
