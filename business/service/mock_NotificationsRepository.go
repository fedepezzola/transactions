// Code generated by mockery v2.42.1. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockNotificationsRepository is an autogenerated mock type for the NotificationsRepository type
type MockNotificationsRepository struct {
	mock.Mock
}

type MockNotificationsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationsRepository) EXPECT() *MockNotificationsRepository_Expecter {
	return &MockNotificationsRepository_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: data
func (_m *MockNotificationsRepository) Notify(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationsRepository_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockNotificationsRepository_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - data interface{}
func (_e *MockNotificationsRepository_Expecter) Notify(data interface{}) *MockNotificationsRepository_Notify_Call {
	return &MockNotificationsRepository_Notify_Call{Call: _e.mock.On("Notify", data)}
}

func (_c *MockNotificationsRepository_Notify_Call) Run(run func(data interface{})) *MockNotificationsRepository_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockNotificationsRepository_Notify_Call) Return(_a0 error) *MockNotificationsRepository_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationsRepository_Notify_Call) RunAndReturn(run func(interface{}) error) *MockNotificationsRepository_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationsRepository creates a new instance of MockNotificationsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationsRepository {
	mock := &MockNotificationsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
